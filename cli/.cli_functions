### cli functions ###
# export the user's home like
# 'export USER_HOME="/Users/<your-user-home>"; '

# check if a command is available
isCommandAvailable() {
  if command -v "${1}" >/dev/null ; then return 0 ; fi
  return 1
}

# source zshrc or bashrc if available
src() {
  local z=$(find ${USER_HOME}/ -maxdepth 1 -type f -name ".zshrc")
  if [ "${z}" != "" ] ; then
    source ${USER_HOME}/.zshrc
    echo ">> sourced .zshrc <<"
  fi
  local b=$(find ${USER_HOME}/ -maxdepth 1 -type f -name ".bashrc")
  if [ "${b}" != "" ] ; then
    source ${USER_HOME}/.bashrc
    echo ">> sourced .bashrc <<"
  fi
}

# print color codes
colorcodes() {
  for code in {000..255}; do
    print -P -- "$code: %F{$code}Test%f";
  done
}

# print calendarweek
week() {
  echo "calendar week: $(date +"%V")"
}

# print actual datestring or add hours to go into the past
datestring() {
  echo "actual date: $(date +"%Y-%m-%d_%H-%M")"
  if [ $# -ne 0 ] ; then
    echo "  past date: $(date -v -${1}H +"%Y-%m-%d_%H-%M")"
  fi
}

# print timestamp seconds and add number of seconds if you want
seconds() {
  local now=$(date +%s)
  if [ $# -ne 0 ] ; then
    local future=$((${now} + ${1}))
    echo "${future}"
  else
    echo "${now}"
  fi
}

# generate one uuid (uuid-runtime has to be installed) ore more (if number is given)
uuid() {
  if isCommandAvailable "uuidgen" ; then
    if [ $# -ne 0 ] ; then
      for i in in {1..$((${1}-1))}; do
        uuidgen | tr '[:upper:]' '[:lower:]'
      done
    else
      uuidgen | tr '[:upper:]' '[:lower:]'
    fi
  else
    echo "error: uuidgen has to be installed"
    return
  fi
}

# generate random number with given digits
rand() {
  if [ $# -ne 0 ] ; then
    echo $(cat /dev/urandom | env LC_CTYPE=C tr -cd '0-9' | head -c ${1})
  else
    echo "error: set number of digits - e.g. rand 5"
    return
  fi
}

# get aliases by name
get_aliases() {
  alias | grep "^${1}.*" --color=never
}

# set a terminal timer (terminal-notifier has to be installed)
timer() {
  if [ $# -ne 0 ] ; then
    if isCommandAvailable "terminal-notifier" ; then
      (sleep $(echo "${1} * 60" | bc) && terminal-notifier -title "TIMER" -message "You already finished ${1} minutes") &
      echo "set timer to ${1} minutes"
    else
      echo "error: terminal-notifier has to be installed"
      return
    fi
  else
    echo "error: timer needs an integer argument for the amount of minutes - e.g. timer 2"
    return
  fi
}

# small lorem ipsum generator (up to 1.000 characters)
loremipsum() {
  local text="Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu f"
  if [ $# -ne 0 ] ; then
    local result=$(echo "${text}" | cut -c 1-${1})
    if [[ "${result}" =~ ' '$ ]] ; then
      echo "${result%?}x"
    else
      echo ${result}
    fi
  else
    echo "error: how many words do you want? - e.g. loremipsum 300"
    return
  fi
}

# sync a file or folder into a backup folder
backup_sync() {
  if [ $# -ne 2 ] ; then
    echo "error: i need 2 parameters - one for file/folder and one for TARGET_FOLDER folder"
    return
  else
    if [[ ! -d "${2}" ]] ; then
      echo "error: no TARGET_FOLDER given"
      return
    else
      SOURCE="${1}"
      TARGET_FOLDER="${2}"
      LOG_FILE="${USER_HOME}/backuplogs/$(date +%Y%m%d%H%M%S)_backup_sync.log"
      ERROR_FILE="${USER_HOME}/backuplogs/$(date +%Y%m%d%H%M%S)_backup_sync_error.log"

      echo "start backup sync from ${1} to ${2}"

      # create backuplogs folder if not exists
      mkdir -p "${USER_HOME}/backuplogs"

      # some dev folder excludes - a bit like .gitignore
      rsync -av --times --checksum --human-readable --itemize-changes --stats \
        --exclude 'build' --exclude 'out' --exclude 'target' --exclude 'dist' --exclude 'RemoteSystemsTempFiles' --exclude 'Servers' --exclude 'node_modules' --exclude '_site' \
        --exclude '.gradle' --exclude '.idea' --exclude '.metadata' --exclude '.recommenders'  --exclude '.settings' \
        --exclude '*.iml' --exclude '*.classpath' --exclude '*.project' --exclude '.DS_Store' \
        --out-format="[%t] %o %l Bytes - %f (last modified: %M)" "${SOURCE}" "${TARGET_FOLDER}" \
          > ${LOG_FILE} 2> ${ERROR_FILE}; [ -s ${ERROR_FILE} ] || rm -f ${ERROR_FILE}
      echo "backup sync done"
    fi
  fi
}

# get a random chuck norris joke one of a given category
chucknorris() {
  if [ $# -ne 0 ] ; then
    echo "chuck norris:"
    echo $(curl https://api.chucknorris.io/jokes/random\?categories\=${1} -s | jq -r '.value')
  else
    echo "chuck norris categories:"
    echo $(curl https://api.chucknorris.io/jokes/categories -s)
    echo "random chuck norris:"
    echo $(curl https://api.chucknorris.io/jokes/random -s | jq -r '.value')
  fi
}

# find files
fif() {
  if [ $# -ne 0 ] ; then
    local found=$(find . -maxdepth 1 -type f -name "*${1}*")
    if (( ${#found[@]} )) ; then
      echo ${found}
    else
      echo "Not found in this folder -> search recursively? (Y|n) [ENTER]"
      read REPLY
      if [[ ${REPLY} =~ ^[Yy]$ ]] ; then
        fifr ${1}
      fi
    fi
  else
    echo "error: search string missing!"
    return
  fi
}

# find files recoursively
fifr() {
  if [ $# -ne 0 ] ; then
    find . -type f -name "*${1}*"
  else
    echo "error: search string missing!"
    return
  fi
}

# find directories
fid() {
  if [ $# -ne 0 ] ; then
    local found=$(find . -maxdepth 1 -type d -name "*${1}*")
    if (( ${#found[@]} )) ; then
      echo ${found}
    else
      echo "Not found in this folder -> search recursively? (Y|n) [ENTER]"
      read REPLY
      if [[ ${REPLY} =~ ^[Yy]$ ]] ; then
        fidr ${1}
      fi
    fi
  else
    echo "error: search string missing!"
    return
  fi
}

# find directories recoursively
fidr() {
  if [ $# -ne 0 ] ; then
    find . -type d -name "*${1}*"
  else
    echo "error: search string missing!"
    return
  fi
}

# split files in N files
fsplit() {
  if [ $# -ne 0 ] ; then
    echo "How much files do you want? [ENTER]"
    read AMOUNT
    echo "Which file suffix? (standard .txt) [ENTER]"
    read SUFFIX
    local filename=$(echo "${1}" | cut -d'.' -f1)
    if [[ -z "${SUFFIX}" ]] ; then
      split -n ${AMOUNT} -d ${1} "${filename}_" --additional-suffix=.txt
    else
      split -n ${AMOUNT} -d ${1} "${filename}_" --additional-suffix=${SUFFIX}
    fi
  else
    echo "error: source file missing!"
    return
  fi
}

# clean up docker images and volumes
dockercleanup() {
  docker system df
  docker system prune -f
  docker volume prune -f
  docker image prune -f
  docker system df
}

# git push with options
git_push() {
  local toBranch=$(git rev-parse --abbrev-ref HEAD)
  echo "You really wanna push? All things checked? (Y|n) [ENTER]"
  read REPLY
  if [[ ! ${REPLY} =~ ^[Yy]$ ]] ; then
    return
  fi
  echo "To which remote? - leave empty for "origin" [ENTER]"
  read REMOTE
  echo "Force push? (Y|n) [ENTER]"
  read FORCE
  local toRemote=${REMOTE:-"origin"}
  if [[ ${FORCE} =~ ^[Yy]$ ]] ; then
    echo "doing a push force now..."
    $(git push ${toRemote} ${toBranch} --force-with-lease)
  else
    echo "doing a push now..."
    $(git push ${toRemote} ${toBranch})
  fi
}

# angular update
ngcliupdate() {
  npm uninstall -g @angular/cli
  npm cache verify
  npm install -g @angular/cli@${1}
}

# remove some build and dev folders
rmbuilds() {
  find . -name node_modules -type d -exec rm -rf {} + # npm
  find . -name dist -type d -exec rm -rf {} + # angular build
  find . -name coverage -type d -exec rm -rf {} + # angular test
  find . -name target -type d -exec rm -rf {} + # maven
  find . -name build -type d -exec rm -rf {} + # gradle
}
