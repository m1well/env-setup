### cli functions ###
# export the user's home like
# 'export USER_HOME="/Users/<your-user-home>"; '

# print aliases by name
print_aliases() {
  alias | grep "^${1}.*" --color=never
}

# print functions from here (alphabetically)
print_functions() {
  echo "backup_sync() # sync a file or folder into a backup folder without some dev build folders/files"
  echo "brew_list() # show installed via brew && brew cask"
  echo "chucknorris() # get a random chuck norris joke one of a given category"
  echo "colorcodes() # print shell color codes"
  echo "datestrings() # print actual datestrings"
  echo "dockercleanup() # clean up docker system, volumes and images"
  echo "fid() # find directories"
  echo "fidr() # find directories recursively"
  echo "fif() # find files"
  echo "fifr() # find files recursively"
  echo "fsplit() # split file in N files"
  echo "git_push() # git push with some options"
  echo "intellij_setup() # print infos of my intellij setup"
  echo "listening() # show apps listening on ports - you can also specify a port"
  echo "loremipsum() # small lorem ipsum generator (up to 2.000 characters)"
  echo "ngcli_update() # angular cli update"
  echo "rand_num() # generate random number with given length (up to 32)"
  echo "rand_pass() # generate random password with given length (up to 32)"
  echo "rm_builds() # remove some build and dev folders"
  echo "seconds() # print timestamp seconds and add number of seconds if you want"
  echo "src() # source zshrc and/or bashrc if available"
  echo "timer() # set a terminal timer (terminal-notifier has to be installed)"
  echo "uuid() # generate one uuid (uuid-runtime has to be installed) ore more (if number is given)"
  echo "week() # print calendarweek"
}

# check if a command is available
isCommandAvailable() {
  if command -v "${1}" >/dev/null ; then return 0 ; fi
  return 1
}

# source zshrc and/or bashrc if available
src() {
  local z=$(find ${USER_HOME}/ -maxdepth 1 -type f -name ".zshrc")
  if [ "${z}" != "" ] ; then
    source ${USER_HOME}/.zshrc
    echo ">> sourced .zshrc <<"
  fi
  local b=$(find ${USER_HOME}/ -maxdepth 1 -type f -name ".bashrc")
  if [ "${b}" != "" ] ; then
    source ${USER_HOME}/.bashrc
    echo ">> sourced .bashrc <<"
  fi
}

# print shell color codes
colorcodes() {
  for code in {000..255}; do
    print -P -- "$code: %F{$code}Test%f";
  done
}

# print calendarweek
week() {
  echo "calendar week: $(date +"%V")"
}

# print actual datestrings
datestrings() {
  echo "# up to second"
  echo "-- $(date +"%Y%m%d%H%M%S")"
  echo "-- $(date +"%Y%m%d-%H%M%S")"
  echo "-- $(date +"%Y-%m-%d_%H-%M-%S")"
  echo "# up to minute"
  echo "-- $(date +"%Y%m%d%H%M")"
  echo "-- $(date +"%Y%m%d-%H%M")"
  echo "-- $(date +"%Y-%m-%d_%H-%M")"
  echo "# up to hour"
  echo "-- $(date +"%Y%m%d%H")"
  echo "-- $(date +"%Y%m%d-%H")"
  echo "-- $(date +"%Y-%m-%d_%H")"
  echo "# up to day"
  echo "-- $(date +"%Y%m%d")"
  echo "-- $(date +"%Y-%m-%d")"
  echo "-- $(date +"%Y/%m/%d")"
  echo "-- $(date +"%d.%m.%Y")"
  echo "-- $(date +"%d/%m/%Y")"
}

# print timestamp seconds and add number of seconds if you want
seconds() {
  local now=$(date +%s)
  if [ $# -ne 0 ] ; then
    local future=$((${now} + ${1}))
    echo "$(date -r ${future}) -- ${future}"
  else
    echo "$(date) -- ${now}"
  fi
}

# generate one uuid (uuid-runtime has to be installed) ore more (if number is given)
uuid() {
  if isCommandAvailable "uuidgen" ; then
    if [ $# -ne 0 ] ; then
      for i in in {1..$((${1}-1))}; do
        uuidgen | tr '[:upper:]' '[:lower:]'
      done
    else
      uuidgen | tr '[:upper:]' '[:lower:]'
    fi
  else
    echo "error: uuidgen has to be installed"
    return
  fi
}

# generate random number with given length (up to 32)
rand_num() {
  if [ $# -ne 0 ] ; then
    if (( ${1} > 32 )); then
      echo "error: only up to 32 digits"
      return
    fi
    local random="${$(head -c 400 < /dev/urandom | cksum)// /}"
    echo "$(echo ${random} | head -c ${1})"
  else
    echo "error: set number of digits - e.g. rand 5"
    return
  fi
}

# generate random password with given length (up to 32)
rand_pass() {
  if [ $# -ne 0 ] ; then
    if (( ${1} > 32 )); then
      echo "error: only up to 32 digits"
      return
    fi
    local random="${$(head -c 400 < /dev/random | base64)}"
    echo "$(echo ${random} | head -c ${1})"
  else
    echo "error: set number of digits - e.g. rand_pass 12"
    return
  fi
}

# set a terminal timer (terminal-notifier has to be installed)
timer() {
  if [ $# -ne 0 ] ; then
    if isCommandAvailable "terminal-notifier" ; then
      (sleep $(echo "${1} * 60" | bc) && terminal-notifier -title "TIMER" -message "You already finished ${1} minutes") &
      echo "set timer to ${1} minutes"
    else
      echo "error: terminal-notifier has to be installed"
      return
    fi
  else
    echo "error: timer needs an integer argument for the amount of minutes - e.g. timer 2"
    return
  fi
}

# sync a file or folder into a backup folder without some dev build folders/files
backup_sync() {
  if [ $# -ne 2 ] ; then
    echo "error: i need 2 parameters - one for file/folder and one for TARGET_FOLDER folder"
    return
  else
    if [[ ! -d "${2}" ]] ; then
      echo "error: no TARGET_FOLDER given"
      return
    else
      SOURCE="${1}"
      TARGET_FOLDER="${2}"
      LOG_FILE="${USER_HOME}/backuplogs/$(date +%Y%m%d%H%M%S)_backup_sync.log"
      ERROR_FILE="${USER_HOME}/backuplogs/$(date +%Y%m%d%H%M%S)_backup_sync_error.log"

      echo "start backup sync from ${1} to ${2}"

      # create backuplogs folder if not exists
      mkdir -p "${USER_HOME}/backuplogs"

      # some dev folder excludes - a bit like .gitignore
      rsync -av --times --checksum --human-readable --itemize-changes --stats \
        --exclude 'build' --exclude 'out' --exclude 'target' --exclude 'dist' --exclude 'RemoteSystemsTempFiles' --exclude 'Servers' --exclude 'node_modules' --exclude '_site' \
        --exclude '.gradle' --exclude '.idea' --exclude '.metadata' --exclude '.recommenders'  --exclude '.settings' \
        --exclude '*.iml' --exclude '*.classpath' --exclude '*.project' --exclude '.DS_Store' \
        --out-format="[%t] %o %l Bytes - %f (last modified: %M)" "${SOURCE}" "${TARGET_FOLDER}" \
          > ${LOG_FILE} 2> ${ERROR_FILE}; [ -s ${ERROR_FILE} ] || rm -f ${ERROR_FILE}
      echo "backup sync done"
    fi
  fi
}

# get a random chuck norris joke one of a given category
chucknorris() {
  if [ $# -ne 0 ] ; then
    echo "chuck norris says:"
    echo $(curl https://api.chucknorris.io/jokes/random\?category\=${1} -s | jq -r '.value')
  else
    echo "chuck norris categories:"
    echo $(curl https://api.chucknorris.io/jokes/categories -s)
    echo "chuck norris says:"
    echo $(curl https://api.chucknorris.io/jokes/random -s | jq -r '.value')
  fi
}

# find files
fif() {
  if [ $# -ne 0 ] ; then
    local found=$(find . -maxdepth 1 -type f -name "*${1}*")
    if (( ${#found[@]} )) ; then
      echo ${found}
    else
      echo "Not found in this folder -> search recursively? (Y|n) [ENTER]"
      read REPLY
      if [[ ${REPLY} =~ ^[Yy]$ ]] ; then
        fifr ${1}
      fi
    fi
  else
    echo "error: search string missing!"
    return
  fi
}

# find files recursively
fifr() {
  if [ $# -ne 0 ] ; then
    find . -type f -name "*${1}*"
  else
    echo "error: search string missing!"
    return
  fi
}

# find directories
fid() {
  if [ $# -ne 0 ] ; then
    local found=$(sudo find . -maxdepth 1 -type d -name "*${1}*")
    if (( ${#found[@]} )) ; then
      echo ${found}
    else
      echo "Not found in this folder -> search recursively? (Y|n) [ENTER]"
      read REPLY
      if [[ ${REPLY} =~ ^[Yy]$ ]] ; then
        fidr ${1}
      fi
    fi
  else
    echo "error: search string missing!"
    return
  fi
}

# find directories recursively
fidr() {
  if [ $# -ne 0 ] ; then
    sudo find . -type d -name "*${1}*"
  else
    echo "error: search string missing!"
    return
  fi
}

# split file in N files
fsplit() {
  if [ $# -ne 0 ] ; then
    local linesInFile=$(cat ${1} | wc -l | xargs)
    echo "File has ${linesInFile} lines - how much lines per file do you want? [ENTER]"
    read LINES_PER_FILE
    echo "Which file suffix? (standard .txt) [ENTER]"
    read SUFFIX
    local filename=$(echo "${1}" | cut -d'.' -f1)
    if [[ -z "${SUFFIX}" ]] ; then
      SFX=".txt"
    else
      SFX=${SUFFIX}
    fi
    split -l "${LINES_PER_FILE}" "${1}"
    local i=1
    local suffixlen=2
    for x in `ls x* | sort`; do
      local prefix=$(printf "%0${suffixlen}d" ${i})
      mv $x ${filename}_${prefix}${SFX}
      i=$(($i+1))
    done
  else
    echo "error: source file missing!"
    return
  fi
}

# clean up docker system, volumes and images
dockercleanup() {
  docker system df
  docker system prune -f
  docker volume prune -f
  docker image prune -f
  docker system df
}

# git push with some options
git_push() {
  local toBranch=$(git rev-parse --abbrev-ref HEAD)
  echo "You really wanna push? All things checked? (Y|n) [ENTER]"
  read REPLY
  if [[ ! ${REPLY} =~ ^[Yy]$ ]] ; then
    return
  fi
  echo "To which remote? - leave empty for "origin" [ENTER]"
  read REMOTE
  echo "Force push? (Y|n) [ENTER]"
  read FORCE
  local toRemote=${REMOTE:-"origin"}
  if [[ ${FORCE} =~ ^[Yy]$ ]] ; then
    echo "doing a push force now..."
    $(git push ${toRemote} ${toBranch} --force-with-lease)
  else
    echo "doing a push now..."
    $(git push ${toRemote} ${toBranch})
  fi
}

# angular cli update
ngcli_update() {
  npm uninstall -g @angular/cli
  npm install -g @angular/cli@latest
}

# remove some build and dev folders
rm_builds() {
  find . -name node_modules -type d -exec rm -rf {} + # npm
  find . -name dist -type d -exec rm -rf {} + # angular build
  find . -name coverage -type d -exec rm -rf {} + # angular test
  find . -name target -type d -exec rm -rf {} + # maven
  find . -name build -type d -exec rm -rf {} + # gradle
}

# show apps listening on ports - you can also specify a port
listening() {
    if [ $# -eq 0 ]; then
        lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        "Usage: listening [pattern]"
    fi
}

# small lorem ipsum generator (up to 2.000 characters)
loremipsum() {
  local template1="Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. "
  local template2="Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. "
  local template3="Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. "
  local template4="Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim v"
  if [ $# -ne 0 ] ; then
    local text="${template1}${template2}${template3}${template4}"
    local result=$(echo "${text}" | cut -c 1-${1})
    if [[ "${result}" =~ ' '$ ]] ; then
      echo "${result%?}x"
    else
      echo ${result}
    fi
  else
    echo "error: how many words do you want? - e.g. loremipsum 300"
    return
  fi
}

# show installed via brew && brew cask
brew_list() {
  brew list && brew list --cask
}

# print infos of my intellij setup
intellij_setup() {
  echo "
editor:
  general:
    autoImport:
      java:
        addUnambiguousImportsOnTheFly: true
      tsAndJs:
        addUnambiguousImportsOnTheFly: true
    editorTabs:
      placement: 'none'
  colorScheme:
    general:
      errorsAndWarnings:
        unknownSymbol:
          foreground: FF0000
        error:
          stripemark: FF0000
          effects: FF0000
    defaults:
      classes:
        staticField:
          foreground: B66DDD
      keyword:
        foreground: C25C25
      metadata:
        foreground: E8E811
      number:
        foreground: 1E61E6
      string:
        stringText:
          foreground: 35F35F
    java:
      annotations:
        annotationName: 'inheritFromMetadata'
  codeStyle:
    java:
      spaces:
        arrayInitializerBraces: true
      wrappingBraces:
        keepSimpleBlocksInOneLine: true
        ifBracesForce: 'always'
        forBracesForce: 'always'
        whileBracesforce: 'always'
        doWhileBracesForce: 'always'
        ternaryOperationWrap: 'wrap if long'
        signsOnNextLine: true
        arraysWrap: 'wrap if long'
      blankLines:
        maximumInDeclaration: 1
        maximumInCode: 1
        beforeEndBrace: 1
        betweenHeaderAndPackages: 1
      imports:
        classCountStartImports: 999
        staticNamesCountStartImports: 999
    styleSheets:
      tabsIndents:
        tabSize: 2
        indent: 2
        continuationIndent: 2
      blankLines:
        maximumInCode: 1
    groovy:
      tabsIndents:
        tabSize: 2
        indent: 2
        continuationIndent: 2
      blankLines:
        maximumInDeclaration: 1
        maximumInCode: 1
        beforeEndBrace: 1
      imports:
        classCountStartImports: 999
        staticNamesCountStartImports: 999
    javascript:
      tabsIndents:
        indentSize: 2
        continuationIndentSize: 2
        tabSize: 2
      spaces:
        objectLiteralBraces: true
        es6ImportExportBraces: true
        arrayBrackets: true
      wrappingBraces:
        keepSimpleBlocksInOneLine: true
        keepSimpleMethodsInOneLine: true
        ifBracesForce: 'always'
        forBracesForce: 'always'
        whileBracesforce: 'always'
        doWhileBracesForce: 'always'
        ternaryOperationWrap: 'wrap if long'
        signsOnNextLine: true
        arraysWrap: 'wrap if long'
      blankLines:
        maximumInCode: 1
      punctuation:
        useSemicolonTermination: 'always'
        useSingleQuotes: 'always'
        trailingComma: 'keep'
    json:
      tabsIndents:
        tabSize: 2
        indent: 2
        continuationIndent: 2
    markdown:
      tabsIndents:
        tabSize: 2
        indent: 2
        continuationIndent: 2
    typescript:
      tabsIndents:
        indentSize: 2
        continuationIndentSize: 2
        tabSize: 2
      spaces:
        objectLiteralBraces: true
        es6ImportExportBraces: true
        arrayBrackets: true
      wrappingBraces:
        keepSimpleBlocksInOneLine: true
        keepSimpleMethodsInOneLine: true
        ifBracesForce: 'always'
        forBracesForce: 'always'
        whileBracesforce: 'always'
        doWhileBracesForce: 'always'
        ternaryOperationWrap: 'wrap if long'
        signsOnNextLine: true
        arraysWrap: 'wrap if long'
      blankLines:
        maximumInCode: 1
      punctuation:
        useSemicolonTermination: 'always'
        useSingleQuotes: 'always'
        trailingComma: 'keep'
  todo:
    patterns:
      pattern: 'MWE*'
      icon: '!'
versionControl:
  commit:
    useNonModalCommitInterface: false
"
}
