### cli functions ###
# export the user's home like
# 'export USER_HOME="/Users/<your-user-home>"; '

# check if a command is available
isCommandAvailable() {
  if command -v "${1}" >/dev/null; then return 0 ; fi
  return 1
}

# source zshrc or bashrc if available
src() {
  local z=$(find ${USER_HOME}/ -maxdepth 1 -type f -name ".zshrc")
  if [ "${z}" != "" ] ; then
    source ${USER_HOME}/.zshrc
    echo ">> sourced .zshrc <<"
  fi
  local b=$(find ${USER_HOME}/ -maxdepth 1 -type f -name ".bashrc")
  if [ "${b}" != "" ] ; then
    source ${USER_HOME}/.bashrc
    echo ">> sourced .bashrc <<"
  fi
}

# tree
## example ...
#|__Cycles
#| |__.DS_Store
#| |__CyclesCards.json
#| |__Carbon
#| | |__Carbon.json
tree() {
  find ${1:-.} -print | sed -e 's;[^/]*/;|_;g;s;_|; |;g'
}

# print color codes
colorcodes() {
  for code in {000..255}; do
    print -P -- "$code: %F{$code}Test%f";
  done
}

# print calendarweek
week() {
  echo "calendar week: $(date +"%V")"
}

# generate one uuid (uuid-runtime has to be installed) ore more (if number is given)
uuid() {
  if isCommandAvailable "uuidgen" ; then
    if [ $# -ne 0 ] ; then
      for i in in {1..$((${1}-1))}; do
        uuidgen | tr '[:upper:]' '[:lower:]'
      done
    else
      uuidgen | tr '[:upper:]' '[:lower:]'
    fi
  else
    echo "error: uuidgen has to be installed"
  fi
}

# generate random number with given digits
rand() {
  if [ $# -ne 0 ] ; then
    echo $(cat /dev/urandom | env LC_CTYPE=C tr -cd '0-9' | head -c ${1})
  else
    echo "error: set number of digits - e.g. rand 5"
  fi
}

# get aliases by name
get_aliases() {
  alias | grep "^${1}.*" --color=never
}

# set a terminal timer (terminal-notifier has to be installed)
timer() {
  if [ $# -ne 0 ] ; then
    if isCommandAvailable "terminal-notifier" ; then
      (sleep $(echo "${1} * 60" | bc) && terminal-notifier -title "TIMER" -message "You already finished ${1} minutes") &
      echo "set timer to ${1} minutes"
    else
      echo "error: terminal-notifier has to be installed"
    fi
  else
    echo "timer needs an integer argument for the amount of minutes"
  fi
}

# small lorem ipsum generator (1.000 characters)
loremipsum() {
  text="Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu f"
  if [ $# -ne 0 ] ; then
    echo ${text} | cut -c 1-${1}
  else
    echo "how many words do you want?"
  fi
}

# sync a file or folder into a backup folder
backup_sync() {
  if [ $# -ne 2 ]; then
    echo "error: i need 2 parameters - one for file/folder and one for TARGET_FOLDER folder"
  else
    if [[ ! -d "${2}" ]] ; then
      echo "error: no TARGET_FOLDER given"
    else
      SOURCE="${1}"
      TARGET_FOLDER="${2}"
      LOG_FILE="${USER_HOME}/backuplogs/$(date +%Y%m%d%H%M%S)_backup_sync.log"
      ERROR_FILE="${USER_HOME}/backuplogs/$(date +%Y%m%d%H%M%S)_backup_sync_error.log"

      echo "start backup sync from ${1} to ${2}"

      # create backuplogs folder if not exists
      mkdir -p "${USER_HOME}/backuplogs"

      # some dev folder excludes - a bit like .gitignore
      rsync -av --times --checksum --human-readable --itemize-changes --stats \
        --exclude 'build' --exclude 'out' --exclude 'target' --exclude 'RemoteSystemsTempFiles' --exclude 'Servers' --exclude 'node_modules' --exclude '_site' \
        --exclude '.gradle' --exclude '.idea' --exclude '.metadata' --exclude '.recommenders'  --exclude '.settings' \
        --exclude '*.iml' --exclude '*.classpath' --exclude '*.project' --exclude '.DS_Store' \
        --out-format="[%t] %o %l Bytes - %f (last modified: %M)" "${SOURCE}" "${TARGET_FOLDER}" \
          > ${LOG_FILE} 2> ${ERROR_FILE}; [ -s ${ERROR_FILE} ] || rm -f ${ERROR_FILE}
      echo "backup sync done"
    fi
  fi
}
